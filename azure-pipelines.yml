# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'
    exclude:
    - artifacts


stages:
 - stage: build_latex
      
   jobs:
    - job: build_latex_script
      strategy:
        matrix:
          ubuntu_20_04:
            image_name: 'ubuntu-20.04'
            agent_pool_name: 'Azure Pipelines'

#          Ubuntu_20_04:
#            agent_pool_name: 'Performance'
            
      pool:
        vmImage: $(image_name)
        name: $(agent_pool_name)
      #condition: eq(variables['Build.Reason'], 'IndividualCI')
      timeoutInMinutes: 30
      steps:
       #Boost
#       - script: sudo apt-get install libboost-all-dev libtbb-dev
#         displayName: "Linux: Install Boost"
#         condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
       #real Tasks:
       - script: git submodule update --init --recursive && echo $PATH
         displayName: "Init Git Submodules"
         condition: succeeded()
   
       - script: source ./texlive/texlive_install.sh 
         displayName: "Install dependencies"
         condition: succeeded()
       - script: echo $PATH
         displayName: "check PATH"
         condition: succeeded()
       - script: cat /etc/environment
         displayName: "check PATH"
         condition: succeeded()
       - script: sudo apt-get update && sudo apt-get install biber gnuplot -y
         displayName: "install biber"
         condition: succeeded()
         
         
       - script: echo 'Check biber version...' && biber --version
         displayName: "Biber"
         condition: succeeded()


       - script: cd src && texliveonfly script.tex || true
         displayName: "Texlive On Fly"
         condition: succeeded()
       - script: cd src && pdflatex -shell-escape -synctex=1 -interaction=nonstopmode script.tex
         displayName: "first compile as preparation fro biber"
         condition: succeeded()
       - script: cd src && biber script
         displayName: "Run Biber"
         condition: succeeded()
       - script: cd src && pdflatex -shell-escape -synctex=1 -interaction=nonstopmode script.tex
         displayName: "Rerun compile for broken references"
         condition: succeeded()

       - script: cd src && pdflatex -shell-escape -synctex=1 -interaction=nonstopmode script.tex > custom_log.log
         displayName: "Rerun compile and save log."
         condition: succeeded()


       - script: cd src && cat custom_log.log
         displayName: "Show log"
         condition: succeeded()
       - script: cd src && cat custom_log.log | grep -E 'at\s*line(s|)\s*[0-9]+' > custom_errors.log || true
         displayName: "Search errors in log only"
         condition: succeeded()
         
         
#  - $TRAVIS_BUILD_DIR/script/check_empty.sh
# - cat custom_errors.log
# - mv script.pdf $TRAVIS_BUILD_DIR/build/
  
  
  
#       - script: cmake --build ./build
#         displayName: "CMake: Compile and Link"
#         condition: succeeded()
#       
#       - script: ./build/src/Syntactic-Reducer ./res/config.json
#         displayName: "Run Syntactic-Reducer with given config.json"
#         condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
#       - script: ls -la ./RESULTS/
#         displayName: "Check directory content of RESULTS"
#         condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
#       - script: ./script/ci/upload-generated-models.sh "$(USER_NAME)" "$(PERSONAL_ACCESS_TOKEN)"
#         displayName: "Upload generated models"
#         condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
         